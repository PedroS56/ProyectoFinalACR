/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyectofinalacr;

import java.awt.Color;
import java.awt.Font;
import java.awt.Image;
import java.io.File;
import java.io.PrintStream;
import java.nio.file.Path;
import java.nio.file.Paths;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import proyectofinalacr.clases.Node;
import proyectofinalacr.hilos.ConnectNoBlocking;
import proyectofinalacr.utils.OutputTextPane;
import proyectofinalacr.utils.Out;

/**
 *
 * @author pet
 */
public class MainFrame extends JFrame {
    private NodeData nodeData;
    private static MainFrame instance;
    private JTable table;
    private DefaultTableModel tableModel;
    int port = 0;
    ImageIcon fondo=new ImageIcon();
    
   

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        while(port == 0){
            String inputDialogPuerto = JOptionPane.showInputDialog("Ingresa el puerto del nodo");
            if(!inputDialogPuerto.equals("")){
                port = Integer.parseInt(inputDialogPuerto);
                nodeData=NodeData.getInstance();
                nodeData.setMyPort(port);
            }
        }
        initComponents();
        customComponents();
        setTitle("Port: "+port);
        setLocationRelativeTo(null);
        setFondo();
        
        Out.info("-- Selecciona path para conectar --");
        
    }
    public static MainFrame getWindow(){
        if(instance==null){
            instance= new MainFrame();
        }
        return instance;
    }
    
    private void customComponents(){
        //Table
        String headers[]={"Id","IPAddress", "RMIPort"};
        tableModel = new DefaultTableModel(headers, 0){
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        table= new JTable(tableModel);
        table.getTableHeader().setBackground(Color.GRAY);
        table.getTableHeader().setForeground(Color.ORANGE);
        table.getTableHeader().setFont(new Font("Raleway", 0, 20));
        table.getTableHeader().setResizingAllowed(false);
        table.getTableHeader().setReorderingAllowed(false);
        table.setBackground(Color.LIGHT_GRAY);
        table.setForeground(Color.ORANGE);
        table.setRowHeight(40);
        table.setFont(new Font("Raleway", 0, 18));
        table.getColumnModel().getColumn(1).setPreferredWidth(200);
        table.setFillsViewportHeight(true);
        table.setFocusable(false);
        setAlinearCelda();
        JScrollPane scrollTable = new JScrollPane(table);
        scrollTable.setBounds(0,0,pnlNodosAdiacentes.getWidth(),pnlNodosAdiacentes.getHeight());
        scrollTable.setBackground(Color.DARK_GRAY);
        pnlNodosAdiacentes.add(scrollTable);
        
        JTextPane textArea = new JTextPane();
        textArea.setBackground(Color.GRAY);

        JScrollPane scrollTextArea = new JScrollPane(textArea);
        scrollTextArea.setBounds(0,0,pnlData.getWidth(),pnlData.getHeight());
        scrollTextArea.setAutoscrolls(true);
        scrollTextArea.setBackground(Color.DARK_GRAY);
        PrintStream printStream = new PrintStream(new OutputTextPane(textArea));
        System.setOut(printStream);
        pnlData.add(scrollTextArea);
        
        btnBuscar.setVisible(false);
        edtBuscar.setVisible(false);
        pnlInfo.setVisible(false);
        btnConectar.setVisible(false);
        this.setVisible(true);
    }
    
    
    void setFondo(){
        lblFondo = new javax.swing.JLabel();
        int x = (int) this.getWidth();
        int y = (int) this.getHeight();
        this.add(lblFondo);
        lblFondo.setBounds(0,0,x,y);
         Path path = Paths.get("src/proyectofinalacr/img/fondoMadera.png");
        fondo= new ImageIcon(path.toString());
        ImageIcon ImgScal= new ImageIcon(fondo.getImage().getScaledInstance(lblFondo.getWidth(),lblFondo.getHeight(),Image.SCALE_DEFAULT));
        lblFondo.setIcon(ImgScal);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnConectar = new javax.swing.JButton();
        pnlNodosAdiacentes = new javax.swing.JPanel();
        pnlData = new javax.swing.JPanel();
        btnBuscar = new javax.swing.JButton();
        edtBuscar = new javax.swing.JTextField();
        btnPath = new javax.swing.JButton();
        pnlInfo = new javax.swing.JPanel();
        lblAnterior = new javax.swing.JLabel();
        lblSiguiente = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 153, 153));
        setResizable(false);

        btnConectar.setBackground(new java.awt.Color(255, 102, 0));
        btnConectar.setFont(new java.awt.Font("Raleway", 1, 14)); // NOI18N
        btnConectar.setForeground(new java.awt.Color(0, 0, 102));
        btnConectar.setText("Conectar");
        btnConectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConectarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlNodosAdiacentesLayout = new javax.swing.GroupLayout(pnlNodosAdiacentes);
        pnlNodosAdiacentes.setLayout(pnlNodosAdiacentesLayout);
        pnlNodosAdiacentesLayout.setHorizontalGroup(
            pnlNodosAdiacentesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        pnlNodosAdiacentesLayout.setVerticalGroup(
            pnlNodosAdiacentesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 261, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout pnlDataLayout = new javax.swing.GroupLayout(pnlData);
        pnlData.setLayout(pnlDataLayout);
        pnlDataLayout.setHorizontalGroup(
            pnlDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        pnlDataLayout.setVerticalGroup(
            pnlDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 255, Short.MAX_VALUE)
        );

        btnBuscar.setFont(new java.awt.Font("Raleway", 0, 13)); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        edtBuscar.setFont(new java.awt.Font("Raleway", 0, 13)); // NOI18N

        btnPath.setBackground(new java.awt.Color(204, 153, 0));
        btnPath.setFont(new java.awt.Font("Raleway", 1, 14)); // NOI18N
        btnPath.setForeground(new java.awt.Color(0, 0, 102));
        btnPath.setText("PATH");
        btnPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPathActionPerformed(evt);
            }
        });

        lblAnterior.setFont(new java.awt.Font("Raleway", 1, 12)); // NOI18N
        lblAnterior.setText("Anterior:");

        lblSiguiente.setFont(new java.awt.Font("Raleway", 1, 12)); // NOI18N
        lblSiguiente.setText("Siguiente:");

        javax.swing.GroupLayout pnlInfoLayout = new javax.swing.GroupLayout(pnlInfo);
        pnlInfo.setLayout(pnlInfoLayout);
        pnlInfoLayout.setHorizontalGroup(
            pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlInfoLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblAnterior, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblSiguiente, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7))
        );
        pnlInfoLayout.setVerticalGroup(
            pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblAnterior, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblSiguiente, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnlInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlNodosAdiacentes, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlData, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(btnConectar, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPath, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(edtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 446, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnConectar, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                    .addComponent(btnPath, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlNodosAdiacentes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(pnlData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(edtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(11, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConectarActionPerformed
        Out.strong("Obteniendo nodos, espere...");
        ConnectNoBlocking.getInstance().start();
        pnlData.revalidate();
        btnConectar.setVisible(false);
        btnPath.setVisible(false);
                        
    }//GEN-LAST:event_btnConectarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        if(edtBuscar.getText().length()==0){
            Out.error("Estribe el nombre del archivo");
        }else{
            String fileName=edtBuscar.getText();
            nodeData.buscaArch(fileName);
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPathActionPerformed
       File temp = seleccionPath();
        while(temp == null){
            temp = seleccionPath();
        }
        nodeData.setSource(temp);
        Out.info("Carpeta: "+temp);
        btnConectar.setVisible(true);
    }//GEN-LAST:event_btnPathActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    
    
    private void setAlinearCelda()
    {
        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        TableModel tableModel = table.getModel();
        for (int columnIndex = 0; columnIndex < tableModel.getColumnCount(); columnIndex++)
        {
            table.getColumnModel().getColumn(columnIndex).setCellRenderer(rightRenderer);
        }
    }

    private File seleccionPath(){
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Select path folder...");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        if (chooser.showOpenDialog(MainFrame.this) == JFileChooser.APPROVE_OPTION) {
            return chooser.getSelectedFile();
        }
        else {
            Out.error("Selecciona un folder...");
            return null;
        }
    }

    public void updateTable(){
        try{
            pnlInfo.setVisible(true);
            lblAnterior.setText("Anterior:"+nodeData.getAnterior().toString());
            lblSiguiente.setText("Siguiente:"+nodeData.getSiguiente().toString());
            if (tableModel.getRowCount() > 0) {
                for (int i=tableModel.getRowCount()-1; i>-1; i--) {
                    tableModel.removeRow(i);
                }
            }
            for(int i=0;i<nodeData.getNodesInNet().size();i++){
                Node node=nodeData.getNodesInNet().get(i);
                String temp[]={(i+1)+"",node.toString(), node.getRMIport()+""};
                tableModel.addRow(temp);
                if(nodeData.isMyIndex(i))
                    table.setRowSelectionInterval(i,i);
            }
            
            btnBuscar.setVisible(true);
            edtBuscar.setVisible(true);
        }catch(Exception e){
        }
    }

    public void enableBusqueda(){
        btnBuscar.setEnabled(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnConectar;
    private javax.swing.JButton btnPath;
    private javax.swing.JTextField edtBuscar;
    private javax.swing.JLabel lblAnterior;
    private javax.swing.JLabel lblSiguiente;
    private javax.swing.JPanel pnlData;
    private javax.swing.JPanel pnlInfo;
    private javax.swing.JPanel pnlNodosAdiacentes;
    // End of variables declaration//GEN-END:variables
    private javax.swing.JLabel lblFondo;
}
